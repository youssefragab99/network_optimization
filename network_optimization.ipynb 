{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Academic license - for non-commercial use only - expires 2022-09-25\n",
      "Using license file /Users/youssefragab/gurobi.lic\n",
      "Gurobi Optimizer version 9.1.2 build v9.1.2rc0 (mac64)\n",
      "Thread count: 6 physical cores, 12 logical processors, using up to 12 threads\n",
      "Optimize a model with 38 rows, 429 columns and 418 nonzeros\n",
      "Model fingerprint: 0xca3c6b13\n",
      "Model has 11 general constraints\n",
      "Variable types: 0 continuous, 429 integer (429 binary)\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 1e+00]\n",
      "  Objective range  [8e-01, 6e+01]\n",
      "  Bounds range     [1e+00, 1e+00]\n",
      "  RHS range        [1e+00, 1e+00]\n",
      "Presolve added 418 rows and 0 columns\n",
      "Presolve time: 0.00s\n",
      "Presolved: 456 rows, 429 columns, 1254 nonzeros\n",
      "Variable types: 0 continuous, 429 integer (429 binary)\n",
      "Found heuristic solution: objective 560.7000000\n",
      "Found heuristic solution: objective 428.7000000\n",
      "\n",
      "Root relaxation: objective 3.052000e+02, 151 iterations, 0.00 seconds\n",
      "\n",
      "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
      " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
      "\n",
      "*    0     0               0     305.2000000  305.20000  0.00%     -    0s\n",
      "\n",
      "Explored 0 nodes (151 simplex iterations) in 0.01 seconds\n",
      "Thread count was 12 (of 12 available processors)\n",
      "\n",
      "Solution count 3: 305.2 428.7 560.7 \n",
      "\n",
      "Optimal solution found (tolerance 1.00e-04)\n",
      "Best objective 3.052000000000e+02, best bound 3.052000000000e+02, gap 0.0000%\n"
     ]
    }
   ],
   "source": [
    "# Importing packages needed:\n",
    "import pandas as pd \n",
    "import numpy as np\n",
    "import gurobipy as gp\n",
    "from gurobipy import GRB\n",
    "from gurobipy import quicksum\n",
    "\n",
    "# Reading in the files: \n",
    "f_cost = pd.read_csv('f_cost.csv', header = 0).iloc[:,[0,1]]\n",
    "s_cost = pd.read_csv('s_cost.csv', header = 0)\n",
    "\n",
    "# Extracting list of clients, facilities, and fixed costs of setting up facilities: \n",
    "clients = s_cost.columns[1:39]\n",
    "facilities = s_cost.iloc[:,0]\n",
    "facility_cost = list(f_cost.iloc[:, 1])\n",
    "\n",
    "# Note: I used i to denote the list of locations and j to denote the list of clients. \n",
    "\n",
    "# Creating the model:\n",
    "m = gp.Model('services')\n",
    "\n",
    "# Creating binary variable for setting up each location.\n",
    "# This will be used to calculate the fixed cost of the locations:\n",
    "x = m.addVars(facilities, vtype = GRB.BINARY, name = 'facility_____')\n",
    "\n",
    "# Creating a binary variable for each possible combination of client and location.\n",
    "# This will be used to calculate the cost of servicing client j from location i:\n",
    "client = {}\n",
    "for i in clients: \n",
    "    client[i] = m.addVars(facilities, vtype = GRB.BINARY, name = f'client__{i}')\n",
    "\n",
    "# Constraints for each client to be serviced by exactly one location. \n",
    "# Since each client has 11 binary variables that denote if client j is being serviced by location i\n",
    "# we set the sum of binary variables 1 to 11 to 1 so that we are sure that only one location is servicing the client.\n",
    "for j in clients:\n",
    "    m.addConstr(sum(client[f'{j}'][i] for i in range(1,12)) == 1)\n",
    "\n",
    "# Constraints to link building facilities with the binary variables client[j][i]. \n",
    "# There are j number of binary variables for each location i\n",
    "# these variables are set to 1 if the location is servicing client j, 0 otherwise.\n",
    "# We are going to set the constraint to set x[i] to the maximum value of client[j][i] for j in (1, 38).\n",
    "# If the location is being used to service any client, that value wil be 1, 0 otherwise.\n",
    "for i in range(1, 12):\n",
    "    m.addConstr(x[i] == gp.max_(client[f'{j}'][i] for j in range(1, 39)))\n",
    "\n",
    "# Creating the fixed cost part of the objective function:\n",
    "fixed_cost = sum(facility_cost[i-1] * x[i] for i in range(1, 12))\n",
    "\n",
    "# Creating the variable cost of the objective function:\n",
    "service_cost = sum(client[f'{j}'][i] * s_cost.iloc[int(i)-1, :][j] for i in range(1, 12) for j in range(1,39))\n",
    "\n",
    "# Setting objective function:\n",
    "obj = fixed_cost + service_cost\n",
    "\n",
    "# Setting objective function to minimize using the model: \n",
    "m.setObjective(obj, GRB.MINIMIZE)\n",
    "\n",
    "# Writing the a file to read the cosntraints:\n",
    "m.write(\"model.lp\")\n",
    "\n",
    "# Optimizing model:\n",
    "m.optimize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<gurobi.Var facility_____[2] (value 1.0)>\n",
      "<gurobi.Var facility_____[5] (value 1.0)>\n",
      "<gurobi.Var facility_____[11] (value 1.0)>\n",
      "<gurobi.Var client__1[5] (value 1.0)>\n",
      "<gurobi.Var client__2[2] (value 1.0)>\n",
      "<gurobi.Var client__3[5] (value 1.0)>\n",
      "<gurobi.Var client__4[11] (value 1.0)>\n",
      "<gurobi.Var client__5[11] (value 1.0)>\n",
      "<gurobi.Var client__6[5] (value 1.0)>\n",
      "<gurobi.Var client__7[2] (value 1.0)>\n",
      "<gurobi.Var client__8[5] (value 1.0)>\n",
      "<gurobi.Var client__9[5] (value 1.0)>\n",
      "<gurobi.Var client__10[2] (value 1.0)>\n",
      "<gurobi.Var client__11[5] (value 1.0)>\n",
      "<gurobi.Var client__12[5] (value 1.0)>\n",
      "<gurobi.Var client__13[5] (value 1.0)>\n",
      "<gurobi.Var client__14[2] (value 1.0)>\n",
      "<gurobi.Var client__15[11] (value 1.0)>\n",
      "<gurobi.Var client__16[11] (value 1.0)>\n",
      "<gurobi.Var client__17[2] (value 1.0)>\n",
      "<gurobi.Var client__18[2] (value 1.0)>\n",
      "<gurobi.Var client__19[11] (value 1.0)>\n",
      "<gurobi.Var client__20[2] (value 1.0)>\n",
      "<gurobi.Var client__21[11] (value 1.0)>\n",
      "<gurobi.Var client__22[11] (value 1.0)>\n",
      "<gurobi.Var client__23[5] (value 1.0)>\n",
      "<gurobi.Var client__24[5] (value 1.0)>\n",
      "<gurobi.Var client__25[5] (value 1.0)>\n",
      "<gurobi.Var client__26[5] (value 1.0)>\n",
      "<gurobi.Var client__27[11] (value 1.0)>\n",
      "<gurobi.Var client__28[2] (value 1.0)>\n",
      "<gurobi.Var client__29[11] (value 1.0)>\n",
      "<gurobi.Var client__30[11] (value 1.0)>\n",
      "<gurobi.Var client__31[2] (value 1.0)>\n",
      "<gurobi.Var client__32[2] (value 1.0)>\n",
      "<gurobi.Var client__33[11] (value 1.0)>\n",
      "<gurobi.Var client__34[11] (value 1.0)>\n",
      "<gurobi.Var client__35[5] (value 1.0)>\n",
      "<gurobi.Var client__36[5] (value 1.0)>\n",
      "<gurobi.Var client__37[11] (value 1.0)>\n",
      "<gurobi.Var client__38[5] (value 1.0)>\n"
     ]
    }
   ],
   "source": [
    "for i in range(len(m.getVars())):\n",
    "    if m.getVars()[i].x == 1:\n",
    "        print(str(m.getVars()[i]))\n",
    "\n",
    "variables = []\n",
    "for i in range(len(m.getVars())):\n",
    "    if m.getVars()[i].x == 1:\n",
    "        variables.append(str(m.getVars()[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Clients serviced by location 2\n",
      "facility_____[2]\n",
      "client__2[2]\n",
      "client__7[2]\n",
      "client__10[2]\n",
      "client__14[2]\n",
      "client__17[2]\n",
      "client__18[2]\n",
      "client__20[2]\n",
      "client__28[2]\n",
      "client__31[2]\n",
      "client__32[2]\n",
      "Clients serviced by location 5\n",
      "facility_____[5]\n",
      "client__1[5]\n",
      "client__3[5]\n",
      "client__6[5]\n",
      "client__8[5]\n",
      "client__9[5]\n",
      "client__11[5]\n",
      "client__12[5]\n",
      "client__13[5]\n",
      "client__23[5]\n",
      "client__24[5]\n",
      "client__25[5]\n",
      "client__26[5]\n",
      "client__35[5]\n",
      "client__36[5]\n",
      "client__38[5]\n",
      "Clients serviced by location 11\n",
      "facility_____[11]\n",
      "client__4[11]\n",
      "client__5[11]\n",
      "client__15[11]\n",
      "client__16[11]\n",
      "client__19[11]\n",
      "client__21[11]\n",
      "client__22[11]\n",
      "client__27[11]\n",
      "client__29[11]\n",
      "client__30[11]\n",
      "client__33[11]\n",
      "client__34[11]\n",
      "client__37[11]\n"
     ]
    }
   ],
   "source": [
    "# As we can see from the output above, locations 2, 5 and 11 are servicing all the clients. \n",
    "# We can now see which locations are serving which clients. \n",
    "for j in [2, 5, 11]:\n",
    "    print(f'Clients serviced by location {j}')\n",
    "    for i in range(len(variables)):\n",
    "        var = variables[i]\n",
    "        if f'[{j}]' in var:\n",
    "            client = var.strip('<gurobi.Var').strip(' (value 1.0)>')\n",
    "            print(client)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
